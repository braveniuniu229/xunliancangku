import torch
import numpy as np
tensor=torch.ones(4,4)
#tensor的维度是先行再列的
# tensor([[1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.],
#         [1., 1., 1., 1.]])
tensor[:,2]=0
# tensor([[1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
        # [1., 1., 0., 1.]])
t1=torch.cat([tensor,tensor,tensor],dim=0)



# tensor([[1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.]])
t2=torch.cat([tensor,tensor,tensor],dim=1)
# tensor([[1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1.],
#         [1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1.],
#         [1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1.],
#         [1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1.]])

y1 = tensor @ tensor.T
y2 = tensor.matmul(tensor.T)
# tensor([[3., 3., 3., 3.],
#         [3., 3., 3., 3.],
#         [3., 3., 3., 3.],
#         [3., 3., 3., 3.]])
# tensor([[3., 3., 3., 3.],
#         [3., 3., 3., 3.],
#         [3., 3., 3., 3.],
#         [3., 3., 3., 3.]])

z1 = tensor * tensor
z2 = tensor.mul(tensor)
# tensor([[1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.]])
# tensor([[1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.],
#         [1., 1., 0., 1.]])

agg=tensor.sum()
# tensor(12.)
agg_item=agg.item()
# 12.0
print(agg)
# 这里直接在自身每个元素加一个值并赋值给自己
tensor.add_(5)
# tensor([[6., 6., 5., 6.],
#         [6., 6., 5., 6.],
#         [6., 6., 5., 6.],
#         [6., 6., 5., 6.]])
print(tensor)


# 从numpy到torch之间的转换
t = torch.ones(5)
print(f"t: {t}")
n = t.numpy()
print(f"n: {n}")
# t: tensor([1., 1., 1., 1., 1.])
# n: [1. 1. 1. 1. 1.]
# 总而言之都是torch的方法，转成numpy直接调用numpy()，来自numpy转成torch就使用torch.from_numpy(x)
n = np.ones(5)
t = torch.from_numpy(n)
